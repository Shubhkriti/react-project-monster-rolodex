{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCDbC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC5B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNbM,G,MAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACtB,uBACIZ,UAAU,SACVW,YAAaA,EACbE,KAAK,SACLC,SAAUF,MCgDHG,E,kDA/Cb,aAAc,IAAD,8BACX,gBAiBFH,aAAe,SAACI,GACX,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAhBzC,EAAKC,MAAS,CACZb,SAAW,GACXU,YAAc,IALL,E,gEAYQ,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,+BAOtC,IAAD,EAE2BC,KAAKN,MAA7Bb,EAFH,EAEGA,SAASU,EAFZ,EAEYA,YAEVU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC7CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACA,iDAEA,cAAC,EAAD,CACEW,YAAc,cACdC,aAAgBe,KAAKf,eAGvB,cAAC,EAAD,CAAUJ,SAAWoB,W,GAvCXI,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.16204562.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180` }/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)\r\n","import React from 'react';\r\n\r\nimport {Card} from '../card/card.component.jsx';\r\n\r\nimport './card-list.style.css';\r\n\r\n\r\nexport const CardList = (props) =>(\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster =>( \r\n       <Card key={monster.id} monster={monster} />))}\r\n\r\n    </div>);","import React from  'react';\r\n\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox =  ({placeholder,handleChange}) => (\r\n    <input \r\n        className='search'\r\n        placeholder={placeholder}\r\n        type='search' \r\n        onChange={handleChange} />\r\n\r\n)","import React, {Component} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport {CardList} from './components/card-list/card-list.components.jsx';\n\nimport {SearchBox} from './components/search-box/search-box.component';\n//import { unstable_renderSubtreeIntoContainer } from 'react-dom';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state =  {\n      monsters : [],\n      searchField : ''\n    };\n\n    //this.handleChange = this.handleChange.bind(this)\n  }\n\n    \n   componentDidMount(){ \n      fetch('https://jsonplaceholder.typicode.com/users')\n          .then(response => response.json() )\n          .then(users => this.setState({monsters:users }))\n  }\n\n  handleChange = (e) => {\n       this.setState({searchField : e.target.value})\n  }\n\n  render(){\n\n      const {monsters,searchField} = this.state;\n\n      const filteredMonster = monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n      return (\n        <div className=\"App\">\n        <h1>Monster roledex</h1>\n\n        <SearchBox \n          placeholder = 'Search Here'\n          handleChange = {this.handleChange}\n        />\n\n        <CardList monsters= {filteredMonster} />\n       \n        \n        </div>\n      \n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}